REST API
========

References:

- (https://bourgeois.me/rest/)
- [Best Practices for Designing a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api)
- [REST Api Quick Tips](http://www.restapitutorial.com/lessons/restquicktips.html)
- (http://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/)


Routes
------

/api/{...}
	Every request starting with /api/ will be forwarded to the related api if not exists
	or will rise an error otherwise

/{...}
	Requests don't matching the previous pattern will serve the HTML/Angular app, which
	will route as follows:
 
	/
		Home page

	/forms-list
		List of all forms handled by Bird-A

	/individuals-list?form={form_uri}
		List of individuals handled by that form

	/edit?form={form_uri}&individual={individual_uri | new}
		Edit of specified individual with the specified form

APIs List
---------

==========================================================================================
/api/v1/forms ? [lang=it] & [offset={x}] & [limit={x}]
==========================================================================================
Example: /api/v1/forms?offset=10&limit=10

------------------------------------------------------------------------------------------
										GET
------------------------------------------------------------------------------------------

Get a list of forms with basilar infos, stats, etc.

Used by: Available forms list

Returns:
{
	"forms": [
		{
			"uri": "http://www.birda.it/form-person-1",
			"type": "http://xmlns.com/foaf/0.1/Person",
			"label": "...",
			"description": "..."
		},
		...
		...
	]
}

==========================================================================================
/api/v1/forms/{form_uri}
==========================================================================================
Example:/api/v1/forms/http://www.birda.it/form-person-1

------------------------------------------------------------------------------------------
										GET
------------------------------------------------------------------------------------------

Get complete set of informations relative to a form. "field" is a nested structure in order
to handle subforms or other nested structures.

Used by: Form creation in edit view

Returns:
{
	"form_uri": "http://birda.com/form-person-1",
	"maps_type": "http://xmlns.com/foaf/0.1/",
	"base_uri": "http://ex.com/",
	"label": "Label",
	"description": "Description",
	"label_property": "http://www.w3.org/2004/02/skos/core#prefLabel",
	"descr_property": "http://www.w3.org/2000/01/rdf-schema#comment",
	"lang": "it",
	"fields": [
		{
			"widget_uri": "http://birda.com/person-givenName-1",
			"w_type": "text-input",
			"property": "http://xmlns.com/foaf/0.1/givenName",
			"label": "Nome",
			"description": "Usare un campo diverso per ogni nome",
			"default": "",
			"placeholder": "Nome della persona (ad es. \"Pino\")",
			"at_least": 1,
			"validation": {
				"max_length":25
			}
		},
		{
			"widget_uri": "http://birda.com/person-familyName-1",
			"w_type": "text-input",
			"property": "http://xmlns.com/foaf/0.1/familyName",
			"label": "Cognome",
			"description": "Usare un campo diverso per ogni cognome",
			"default": "",
			"placeholder": "Cognome della persona (ad es. \"Rossi\")",
			"at_least": 1,
			"validation": {
				"max_length":25
			}
		},
		{
			"widget_uri": "http://birda.com/person-gender-1",
			"w_type": "radio-input",
			"property": "http://xmlns.com/foaf/0.1/gender",
			"label": "Genere",
			"description": "",
			"placeholder": "",
			"at_least": 1,
			"choices": [
				{
					"label": "Uomo",
					"description": "",
					"type": "xsd:string",
					"value": "http://w3id.com/gender-ontology/male"
				},
				{
					"label": "Donna",
					"description": "",
					"type": "xsd:string",
					"value": "http://w3id.com/gender-ontology/female"
				},
				{
					"label": "Non specificato",
					"description": "",
					"type": "xsd:string",
					"value": "http://w3id.com/gender-ontology/not-specified",
					"default": true
				}
			]
			"validation": {
				"required": true
			}
		},
		{
			"widget_uri": "http://birda.com/person-knows-1",
			"w_type": "subform",
			"maps_property": "http://xmlns.com/foaf/0.1/knows",
			"maps_type": "http://xmlns.com/foaf/0.1/",
			"label": "Persone conosciute",
			"description": "",
			"at_least": 0,
			"at_most":50,
			
			"fields": [ 
				{
					"widget_uri": "http://birda.com/person-givenName-1",
					"w_type": "text-input",
					"property": "http://xmlns.com/foaf/0.1/givenName",
					"label": "Nome",
					"description": "Usare un campo diverso per ogni nome",
					"placeholder": "Nome della persona (ad es. \"Pino\")",
					"at_least": 1,
					"validation": {
						"max_length":25
					}
				},
				{
					"widget_uri": "http://birda.com/person-familyName-1",
					"w_type": "text-input",
					"property": "http://xmlns.com/foaf/0.1/familyName",
					"label": "Cognome",
					"description": "Usare un campo diverso per ogni cognome",
					"placeholder": "Cognome della persona (ad es. \"Rossi\")",
					"at_least": 1,
					"validation": {
						"max_length":25
					}
				}
			]
		}
	],
	"local_name":{
		"fields": ["givenName", "familyMame"],
		"localNameSeparator": "_",
		"tokenSeparator": "(\.|\s|-)+",
		"localNameRenderer": "lowercase"
	}
}

==========================================================================================
/api/v1/individuals/search ? [lang=it] & [offset={x}] & [limit={x}]
==========================================================================================
Example: /api/v1/individuals?lang=en&offset=10&limit=10

------------------------------------------------------------------------------------------
										POST
------------------------------------------------------------------------------------------

Resarch a list of individuals with a complex filter.

Used by: subform searches

Params: 
{
	"properties": [
		{
			"uri": "http://xmlns.com/foaf/0.1/givenName"
		},
		{
			"uri": "http://xmlns.com/foaf/0.1/familyName"
		},
		...
		...
	],
	"filters":[
		{
			"property": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
			"value": "http://xmlns.com/foaf/0.1/Person",
			"match": "exact"
		},
		{
			"property": "http://xmlns.com/foaf/0.1/familyName",
			"value": "http://xmlns.com/foaf/0.1/Person",
			"match": "starts_with"
		},
		...
		...
	],
	"order_by":[
		{
			"property": "http://xmlns.com/foaf/0.1/familyName",
			"order": "desc"
		},
		...
		...
	]
	"limit": 20,
	"offset": 0
}

Returns:
{
	"individuals": [
		{
			"uri": "http://ex.com/john-max-smith",
			"type": "http://xmlns.com/foaf/0.1/Person",
			"lang": "en",
			"label": "John Max Smith",
			"description": "Famous actor",
			"last_modified": "2015-11-25 14:33:01",
			"authors": [
				{
					"uri": "http://bigio-bagio.it#me",
					"label": "Bigio Bagio"
				},
				...
				...
			],
			"properties": [
				{
					"uri": "http://xmlns.com/foaf/0.1/givenName",
					"values": ["John", "Max"]
				},
				{
					"uri": "http://xmlns.com/foaf/0.1/familyName",
					"values": ["Smith"]
				},
				...
				...
			]
		},
		...
		...
	]
}

==========================================================================================
/api/v1/individuals/{individual_uri} ? [form={form_uri}] & [lang=it]
==========================================================================================
Example: /api/v1/individuals/http://www.birda.it/john-smith?form=http://www.birda.it/form-person-1

------------------------------------------------------------------------------------------
										GET
------------------------------------------------------------------------------------------

Get properties relative to an individual. If a form is specified, it returns only properties
handled by the specified form or subform.

Used for: fill a form with informations relative to an individual.

Returns:
{{
Same as GET /api/v1/individuals/search returned JSON, with only one indvidual
}}

------------------------------------------------------------------------------------------
										POST
------------------------------------------------------------------------------------------

Update an individual. Informations possibly changed in the process, like url, authors and
last_modified should be returned in response and updated on the screen.

In POST the query string "form" is mandatory (backend uses it to deduct which informations
of the specified indivdual should be deleted and rewritten)

Used in: Update an existing individual

Payload:
{{
Same as GET returned JSON except for "uri", "authors" and "last_modified" missing
}}

Returns:
{{
Same as GET returned JSON (useful for reload "uri", "authors" and "last_modified")
}}

------------------------------------------------------------------------------------------
									  DELETE
------------------------------------------------------------------------------------------

Delete all data for that individual.

==========================================================================================
/api/v1/individuals
==========================================================================================
Example: /api/v1/individuals

------------------------------------------------------------------------------------------
										PUT
------------------------------------------------------------------------------------------

Create an individual. Informations possibly changed in the process, like url, authors and
last_modified should be returned in response and updated on the screen.

Used by: Creation of a new individual

Payload:
{{
Same as POST JSON payload
}}

Returns:
{{
Same as POST returned JSON
}}


==========================================================================================
/api/v1/values/{property_uri} ? [subject_type={type_uri}] & [offset={x}] & [limit={x}]
==========================================================================================
Example: /api/v1/values/http://xmlns.com/foaf/0.1/givenName?subject_type=http://xmlns.com/foaf/0.1/Person?offset=10&limit=10

------------------------------------------------------------------------------------------
										GET
------------------------------------------------------------------------------------------

Get all values of a specified property (optionally filtered by subject type)

Used by: Fields autocompletion

Returns:
{
	"values": [
		"Pippo",
		"Pluto",
		"Paperino",
		...
		...
	]
}
